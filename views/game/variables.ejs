<%
  testing.lightAllTiles = true;
  testing.hideFogTiles = false;
  testing.showMapCellBorders = false;

  for (let r = 0; r < numRows; r++) {
    map[r] = [];
    for (let c = 0; c < numCols; c++) {
      map[r][c] = {
        myCity: false,
        rivalCity: false,
        cityId: null,
        myUnit: false,
        rivalUnit: false,
        moves: [],
        workTiles: [],
        buyTiles: [],
        lit: false || testing.lightAllTiles,
        discovered: false,
        edges: {
          dark: [],
          fog: [],
          coast: [],
          territory: [],
          road: [],
        },
        player: null,
        owned: false,
      };
    }
  }

  let playerNums = {};
  players.forEach((player, i) => {
    playerNums[player._id] = i;
  });

  cities.forEach(city => {
    let [r, c] = city.location;

    map[r][c].cityId = city._id;

    if (isCurrentTurnPlayer(city.player)) {
      map[r][c].myCity = true;
    } else {
      map[r][c].rivalCity = true;
    }
  });

  tiles.forEach(tile => {
    let [r, c] = tile.location;

    map[r] = map[r] || [];
    map[r][c].tile = tile;
    map[r][c].food = tile.production.food;
    map[r][c].gold = tile.production.gold;
    map[r][c].labor = tile.production.labor;
    map[r][c].discovered = tile.isDiscovered;

    if (tile.player) {
      map[r][c].player = playerNums[tile.player] + 1;
      if (isCurrentTurnPlayer(tile.player)) {
        map[r][c].owned = true;

        helpers.forEachAdjacentTile(numRows, numCols, tiles, r, c, (_, r1, c1) => {
          map[r1][c1].lit = true;
        });
      }
    }
  });

  currentTurnCities.forEach(city => {
    const unemployedCitizens = help.numCityUnemployedCitizens(city);
    const alreadyCoveredBuyableTile = {};

    help.getCityWorkableTiles(city).forEach(tile => {
      let [r, c] = tile.location;
      let working = false;

      if ('' + tile.worked == '' + city._id) {
        working = true;
      } else if (unemployedCitizens <= 0) {
        working = 'disabled';
      }

      map[r][c].workTiles.push({
        cityId: city._id,
        tileId: tile._id,
        path: '/workTile/' + city._id + '/' + tile._id,
        working: working,
      });
    });

    help.getCityClaimableTiles(city).forEach(tile => {
      const [r, c] = tile.location;
      map[r][c].buyTiles.push({
        cityId: city._id,
        path: '/buyTile/' + city._id + '/' + tile._id,
        price: 10,
      });
    });
  });

  let count1 = 0;

  const addUnitMovementForms = (unit) => {
    if (unit.movesRemaining == 0) {
      return;
    }

    help.forEachAdjacentTile(unit.location, tile => {
      if (tile.terrain.mountain) {
        return;
      }

      const aquaticUnit = unit.templateName == 'galley';

      if (aquaticUnit) {
        if (!tile.terrain.water && tile.improvement != 'city') {
          return;
        }
      } else if (tile.terrain.water) {
        const tileBoatUnits = currentTurnUnits.filter(otherUnit => {
          return help.sameLocation(tile.location, otherUnit.location);
        });

        if (tileBoatUnits.length == 0) {
          return;
        }
      }

      const [r, c] = tile.location;

      map[r][c].moves.push({
        unitId: unit._id,
        path: '/moveUnit/' + unit._id + '/' + r + '/' + c,
        direction: help.getAdjacentDirection(unit.location, tile.location),
      });
    });
  };

  currentTurnUnits.forEach(unit => {
    let [row, col] = unit.location;
    map[row][col].myUnit = true;
    map[row][col].unitId = unit._id;

    let litTiles = getVisibleTiles(row, col);

    litTiles.forEach(coords => {
      let [r, c] = coords;
      map[r][c].lit = true;
    });

    addUnitMovementForms(unit);
  });

  rivalUnits.forEach(unit => {
    let [i, j] = unit.location;
    map[i][j].rivalUnit = true;
    map[i][j].unitId = unit._id;
  });
%>
