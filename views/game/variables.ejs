<%
    for (let i = 0; i < game.mapSize[0]; i++) {
        map[i] = [];
        for (let j = 0; j < game.mapSize[1]; j++) {
            map[i][j] = {
                city: false,
                myUnit: false,
                rivalUnit: false,
                moves: [],
                lit: false,
                discovered: false,
                player: null,
                owned: false,
            };
        }
    }

    let playerNums = {};
    players.forEach((player, i) => {
        playerNums[player._id] = i;
    });

    cities.forEach(city => {
        map[city.location[0]][city.location[1]].city = true;
    });

    tiles.forEach(tile => {
        map[tile.row] = map[tile.row] || [];
        map[tile.row][tile.column].tile = tile;

        if (tile.owner) {
            map[tile.row][tile.column].player = playerNums[tile.owner] + 1;
            if (tile.owner == currentTurnPlayerId) {
                map[tile.row][tile.column].owned = true;

                for (let i = tile.row - 2; i <= tile.row + 2; i++) {
                    for (let j = tile.column - 2; j <= tile.column + 2; j++) {
                        if (map[i] && map[i][j]) {
                            map[i][j].lit = true;
                        }
                    }
                }
            }
        }

        if (tile.discovered.indexOf(currentTurnPlayerId) >= 0) {
            map[tile.row][tile.column].discovered = true;
        }
    });

    currentTurnUnits.forEach(unit => {
        let [row, col] = unit.location;
        map[row][col].myUnit = true;
        map[row][col].unitId = unit._id;

        for (r = row - 2; r <= row + 2; r++) {
            if (r < 0) {
                continue;
            }
            if (r == game.mapSize[0]) {
                break;
            }
            for (cTemp = col - 2; cTemp <= col + 2; cTemp++) {
                let c = cTemp;

                if (c < 0) {
                    c += game.mapSize[1];
                } else if (c >= game.mapSize[1]) {
                    c -= game.mapSize[1];
                }

                map[r][c].lit = true;

                if (unit.movesRemaining == 0) {
                    continue;
                }

                let isAdjacentTile = (() => {
                    if (col == c) {
                        return Math.abs(row - r) == 1;
                    }

                    if (row != r) {
                        return false;
                    }

                    if ((c == game.mapSize[1] - 1 && col == 0)
                            || (col == game.mapSize[1] - 1 && c == 0)) {
                        return true;
                    }

                    return Math.abs(col - c) == 1;
                })();

                if (isAdjacentTile) {
                    map[r][c].moves.push({
                        unitId: unit._id,
                        path: '/moveUnit/' + unit._id + '/' + r + '/' + c,
                    });
                }
            }
        }
    });

    rivalUnits.forEach(unit => {
        let [i, j] = unit.location;
        map[i][j].rivalUnit = true;
        map[i][j].unitId = unit._id;
    });
%>
