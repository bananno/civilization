<%
    let unitType = unit.unitType.name;
    let movesRemaining = unit.movesRemaining > 0;
    let noMoves = unit.movesRemaining == 0;
    let tile = findTile(unit.location);
    let inForest = tile.terrain.forest;
    let onHill = tile.terrain.hill;
    let inOwnTerritory = tile.player && '' + tile.player == '' + turnPlayerId;
    let inRivalTerritory = tile.player && '' + tile.player != '' + turnPlayerId;
    let inCity = cities.filter(city => city.location[0] == unit.location[0]
        && city.location[1] == unit.location[1]).length > 0;

    let actions = [];

    if (unitType == 'settler') {
        actions.push({
            path: '/foundCity/' + unit._id,
            disabled: noMoves || inRivalTerritory || inCity,
            text: 'found city',
        });
    } else if (unitType == 'worker') {
        actions.push({
            path: '/unitOrders/buildRoad/' + unit._id,
            hidden: unit.orders == 'build road' || tile.road,
            text: 'build road',
        });
        actions.push({
            path: '/unitOrders/buildFarm/' + unit._id,
            hidden: inCity || unit.orders == 'build farm' || tile.improvement == 'farm',
            disabled: inForest || !inOwnTerritory,
            text: 'build farm',
        });
        actions.push({
            path: '/unitOrders/buildMine/' + unit._id,
            hidden: !onHill || inCity || unit.orders == 'build mine' || tile.improvement == 'mine',
            disabled: inForest || !inOwnTerritory,
            text: 'build mine',
        });
        actions.push({
            path: '/unitOrders/chopForest/' + unit._id,
            hidden: !inForest || unit.orders == 'chop forest',
            disabled: inRivalTerritory,
            text: 'chop forest',
        });
        if (tile.improvement) {
            actions.push({
                path: '/unitOrders/removeImprovement/' + unit._id,
                disabled: !inOwnTerritory,
                text: 'remove ' + tile.improvement,
            });
        }
    }

    if (movesRemaining) {
        actions.push({
            path: '/unitOrders/skipTurn/' + unit._id,
            text: 'skip turn',
        });
    }

    if (unit.orders) {
        actions.push({
            path: '/unitOrders/cancel/' + unit._id,
            hidden: unit.orders == 'sleep' || unit.orders == 'skip turn',
            text: 'cancel',
        });
    }

    if (unit.orders == 'sleep') {
        actions.push({
            path: '/unitOrders/wake/' + unit._id,
            text: 'wake',
        });
    } else {
        actions.push({
            path: '/unitOrders/sleep/' + unit._id,
            text: 'sleep',
        });
    }
%>

<div class="view-unit" unit-id="<%= unit._id %>">
    <div class="close">X</div>
    <div>
        <b>type:</b>
        <%= unit.unitType.name %>
    </div>
    <div>
        <b>moves:</b>
        <%= unit.movesRemaining %>
    </div>
    <div>
        <b>orders:</b>
        <% if (unit.orders) { %>
            <%= unit.orders %>
        <% } else { %>
            NONE
        <% } %>
    </div>

    <div>
        <b>actions:</b>

        <% actions.forEach(action => { %>
            <%
                if (action.hidden) {
                    return;
                }
            %>
            <form action="<%= action.path %>" method="post">
                <% if (action.disabled) { %>
                    <button disabled="disabled"><%= action.text %></button>
                <% } else { %>
                    <button type="submit"><%= action.text %></button>
                <% } %>
            </form>
        <% }); %>
    </div>
</div>
