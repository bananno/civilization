<%
  const isDark = (row, col) => {
    if (row < 0 || row >= numRows) {
      return true;
    }
    return !map[row][col].discovered;
  };

  for (let r = 0; r < numRows; r++) {
    for (let c = 0; c < numCols; c++) {

      if (isDark(r, c)) {
        continue;
      }

      let edges = [
        [false, false, false],
        [false, null, false],
        [false, false, false]
      ];

      let c1 = helpers.getColumn(numCols, c - 1);
      let c2 = helpers.getColumn(numCols, c + 1);

      edges[2] = [isDark(r + 1, c1), isDark(r + 1, c), isDark(r + 1, c2)];
      edges[0] = [isDark(r - 1, c1), isDark(r - 1, c), isDark(r - 1, c2)];

      edges[1][0] = isDark(r, c1);
      edges[1][2] = isDark(r, c2);

      if (edges[0][1]) {
        map[r][c].edges.push('side-dark side-top');
      }

      if (edges[1][0]) {
        map[r][c].edges.push('side-dark side-left');
      }

      if (edges[2][1]) {
        map[r][c].edges.push('side-dark side-bottom');
      }

      if (edges[1][2]) {
        map[r][c].edges.push('side-dark side-right');
      }

      if (edges[0][0] && !edges[0][1] && !edges[1][0]) {
        map[r][c].edges.push('corner-dark corner-top-left');
      }

      if (edges[0][2] && !edges[0][1] && !edges[1][2]) {
        map[r][c].edges.push('corner-dark corner-top-right');
      }

      if (edges[2][0] && !edges[1][0] && !edges[2][1]) {
        map[r][c].edges.push('corner-dark corner-bottom-left');
      }

      if (edges[2][2] && !edges[2][1] && !edges[1][2]) {
        map[r][c].edges.push('corner-dark corner-bottom-right');
      }
    }
  }
%>
