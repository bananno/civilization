<%
  const edgeNames = ['left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'];

  for (let r = 0; r < numRows; r++) {
    const shiftRow = r % 2 == 0;
    for (let c = 0; c < numCols; c++) {

      if (!map[r][c].discovered) {
        continue;
      }

      const inWater = map[r][c].tile.terrain.water;

      const c1 = helpers.getColumn(numCols, c - 1);
      const c2 = helpers.getColumn(numCols, c + 1);

      const dark = {};
      const fog = {};
      const coast = {};

      const findEdges = (dir, r, c1, c2) => {
        if (r < 0 || r >= numRows) {
          return;
        }
        dark[dir + 'left'] = !map[r][c1].discovered;
        dark[dir + 'right'] = !map[r][c2].discovered;
        fog[dir + 'left'] = !dark.left && !map[r][c1].lit;
        fog[dir + 'right'] = !dark.right && !map[r][c1].lit;
        coast[dir + 'left'] = inWater != map[r][c1].tile.terrain.water;
        coast[dir + 'right'] = inWater != map[r][c2].tile.terrain.water;
      };

      findEdges('', r, c1, c2);

      if (shiftRow) {
        findEdges('top-', r - 1, c, c2);
        findEdges('bottom-', r + 1, c, c2);
      } else {
        findEdges('top-', r - 1, c1, c);
        findEdges('bottom-', r + 1, c1, c);
      }

      edgeNames.forEach(edgeName => {
        if (dark[edgeNames]) {
          map[r][c].edge.dark.push('edge-dark-' + edgeName);
        }
        if (fog[edgeNames]) {
          map[r][c].edge.fog.push('edge-fog-' + edgeName);
        }
        if (coast[edgeNames]) {
          map[r][c].edge.coast.push('edge-coast-' + edgeName);
        }
      });
    }
  }
%>
