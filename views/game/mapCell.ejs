<%
    let tile = cell.tile;

    let tileStack = [];

    let food = tile.food;
    let gold = tile.gold;

    let clickable = false;
    let onClick = null;

    let className = 'map-cell boardnum-' + boardnum;

    let allowTileEntry = true;

    if (boardnum != 1) {
        className += ' off-screen';
    }

    if (cell.lit || cell.owned || cell.discovered) {
        const [r, c] = tile.location;

        const inWater = tileRef[r][c].terrain.water;

        let c1 = helpers.getColumn(numCols, c - 1);
        let c2 = helpers.getColumn(numCols, c + 1);

        const coast = {
            left: false,
            right: false,
            topLeft: false,
            bottomLeft: false,
            topRight: false,
            bottomRight: false,
        };

        coast.left = inWater != tileRef[r][c1].terrain.water;
        coast.right = inWater != tileRef[r][c2].terrain.water;

        if (shiftRow) {
            c1 = c;
        } else {
            c2 = c;
        }

        if (r > 0) {
            coast.topLeft = inWater != tileRef[r - 1][c1].terrain.water;
            coast.topRight = inWater != tileRef[r - 1][c2].terrain.water;
        }

        if (r < numRows - 1) {
            coast.bottomLeft = inWater != tileRef[r + 1][c1].terrain.water;
            coast.bottomRight = inWater != tileRef[r + 1][c2].terrain.water;
        }

        const cornerCoasts = [];

        if (coast.left) {
            if (coast.topLeft) {
                cornerCoasts.push('layer-curve-top-left');
            }
            if (coast.bottomLeft) {
                cornerCoasts.push('layer-curve-bottom-left');
            }
        }

        if (coast.right) {
            if (coast.topRight) {
                cornerCoasts.push('layer-curve-top-right');
            }
            if (coast.bottomRight) {
                cornerCoasts.push('layer-curve-bottom-right');
            }
        }

        if (tile.terrain.water) {
            tileStack.push('ground ground-grassland');
            tileStack.push('water ' + cornerCoasts.join(' '));
        } else {
            tileStack.push('water');
            tileStack.push('ground ground-' + tile.terrain.ground + ' '
                + cornerCoasts.join(' '));
        }

        if (cell.player) {
            className += ' player' + cell.player;
            tileStack.push('territory territory-' + cell.player);
        }

        if (tile.terrain.mountain) {
            tileStack.push('mountain');
        }

        if (tile.terrain.hill) {
            tileStack.push('hill');
        }

        if (tile.road) {
            if (cell.roads.length == 0) {
                tileStack.push('road road-lone');
            } else {
                cell.roads.forEach(road => {
                    tileStack.push('road road-' + road);
                });
            }
        }

        if (tile.terrain.forest) {
            tileStack.push('forest');
        }

        if (tile.improvement) {
            let improvementName = tile.improvement.split(' ').join('-');
            className += ' ' + improvementName;
            tileStack.push('improvement improvement-' + improvementName);
        }

        if (cell.myCity || cell.myUnit) {
            tileStack.push('highlight');
            clickable = true;
        }

        if (cell.myCity || cell.rivalCity) {
            tileStack.push('city');
        }

        if (cell.myUnit || cell.rivalUnit) {
            let unit = unitsById[cell.unitId];
            let unitName = unit.templateName;
            tileStack.push('unit unit-' + unitName);
        }

        if (!cell.lit) {
            className += ' fog';
            tileStack.push('fog');
        }

        /* [UPDATE FOR HEX]
        cell.edges.forEach(edge => {
            tileStack.push('edge-' + edge);
        });*/

        if (clickable) {
            className += ' clickable';
            onClick = 'clickMapCell(' + r + ', ' + c + ')';
        }

        if (cell.rivalUnit || cell.rivalCity) {
            allowTileEntry = false;
        } else if (cell.myUnit) {
            if (cell.tile.terrain.water) {
                const waterUnit = helpers.findUnit(units, cell.unitId);
                if (waterUnit.templateName != 'galley') {
                    allowTileEntry = false;
                }
            } else {
                allowTileEntry = false;
            }
        }
    } else {
        className += ' notDiscovered';
    }
%>

<div class="<%= className %>" row="<%= r %>" column="<%= c %>"
        onMouseover="hoverMapCell(<%= r %>, <%= c %>)"
        onClick="<%= onClick %>">

    <% tileStack.forEach(layer => { %>
        <div class="tile-stack layer-<%= layer %>"> </div>
    <% }); %>

    <% if (allowTileEntry) { %>
        <% cell.moves.forEach(move => { %>
            <form action="<%= move.path %>" method="post"
                class="move-unit <%= move.direction %>"
                unit-id="<%= move.unitId %>"
                onClick="$(this).submit()">
            </form>
        <% }); %>
    <% } %>

    <% cell.workTiles.forEach(workTile => { %>
        <form action="<%= workTile.path %>" method="post"
            class="work-tile working-<%= workTile.working %>"
            city-id="<%= workTile.cityId %>"
            <% if (workTile.working != 'disabled') { %>
                onClick="$(this).submit()"
            <% } %>
            >
        </form>
    <% }); %>
</div>
